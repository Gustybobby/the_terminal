generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String      @id @default(cuid())
  email       String      @unique
  name        String?
  role        Role        @default(USER)
  airlineRole AirlineRole @default(Crew)
  terminalId  Int?
  airlineId   Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  airline     Airline?    @relation(fields: [airlineId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  terminal    Terminal?   @relation(fields: [terminalId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model Terminal {
  id                Int             @id
  secret            String          @unique
  title             String
  description       String
  passengerRate     Int
  unitTick          Int             @default(1)
  airlineId         Int?
  lastUpdateTick    Int             @default(0)
  capturedByRecords CaptureRecord[]
  effects           Effect[]
  capturedBy        Airline?        @relation(fields: [airlineId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  staffs            User[]
}

model Airline {
  id             Int             @id
  title          String          @default("Untitled")
  airlineSecret  String          @unique
  passengers     Int
  color          Color
  class          AirlineClass    @default(None)
  ready          Boolean         @default(false)
  skillUse       Int             @default(0)
  captureRecords CaptureRecord[]
  applyEffects   Effect[]        @relation("applyBy")
  recieveEffects Effect[]        @relation("applyTo")
  captures       Terminal[]
  crews          User[]
}

model CaptureRecord {
  id           Int       @id @default(autoincrement())
  capturedAt   DateTime
  endAt        DateTime?
  capturedTick Int
  endTick      Int?
  terminalId   Int
  airlineId    Int
  airline      Airline   @relation(fields: [airlineId], references: [id], onUpdate: Restrict)
  terminal     Terminal  @relation(fields: [terminalId], references: [id], onUpdate: Restrict)
}

model Effect {
  id            Int          @id @default(autoincrement())
  type          AirlineClass
  fromTick      Int
  toTick        Int
  flatRate      Int?
  multiplier    Float?
  unitTick      Int?
  applyBy       Airline      @relation("applyBy", fields: [applyById], references: [id], onUpdate: Restrict)
  applyById     Int
  applyTo       Airline?     @relation("applyTo", fields: [applyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  applyToId     Int?
  applyTerminal Terminal?    @relation(fields: [terminalId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  terminalId    Int?
}

model GameState {
  id              String    @id
  pause           Boolean
  currentTick     Int
  lastTickUpdate  DateTime  @default(now())
  lastPause       DateTime?
  lastResume      DateTime?
  showLeaderboard Boolean   @default(true)
  start           Boolean   @default(false)
  phase           Int       @default(1)
}

enum Role {
  ADMIN
  STAFF
  USER
}

enum AirlineRole {
  Captain
  Crew
  Co_pilot
}

enum AirlineClass {
  ICT
  MSME
  BCET
  MT
  CET
  None
}

enum Color {
  RED
  PINK
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
  BROWN
  AQUA
  BEIGE
}
