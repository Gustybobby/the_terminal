generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String      @id @default(cuid())
  email             String      @unique
  name              String?
  role              Role        @default(USER)
  airlineRole       AirlineRole @default(Crew)
  terminalId        Int?
  airlineId         Int?
  lastSecretAttempt DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  airline           Airline?    @relation(fields: [airlineId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  terminal          Terminal?   @relation(fields: [terminalId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model Terminal {
  id                  Int             @id
  title               String
  description         String
  passengerRate       Int
  unitTime            Int             @default(5)
  game                Game            @default(None)
  airlineId           Int?
  lastPassengerUpdate DateTime
  currentFlagSecret   String
  capturedByRecords   CaptureRecord[]
  effects             Effect[]
  capturedBy          Airline?        @relation(fields: [airlineId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  staffs              User[]
}

model Airline {
  id             Int             @id
  title          String          @default("Untitled")
  airlineSecret  String          @unique
  passengers     Int
  class          AirlineClass    @default(None)
  ready          Boolean         @default(false)
  captureRecords CaptureRecord[]
  applyEffects   Effect[]        @relation("applyBy")
  recieveEffects Effect[]        @relation("applyTo")
  captures       Terminal[]
  crews          User[]
}

model CaptureRecord {
  id         Int      @id @default(autoincrement())
  capturedAt DateTime
  terminalId Int
  airlineId  Int
  airline    Airline  @relation(fields: [airlineId], references: [id], onUpdate: Restrict)
  terminal   Terminal @relation(fields: [terminalId], references: [id], onUpdate: Restrict)
}

model Effect {
  id            Int          @id @default(autoincrement())
  type          AirlineClass
  from          DateTime
  to            DateTime
  applyById     Int
  applyToId     Int?
  flatRate      Int?
  multiplier    Float?
  terminalId    Int?
  unitTime      Int?
  applyBy       Airline      @relation("applyBy", fields: [applyById], references: [id], onUpdate: Restrict)
  applyTo       Airline?     @relation("applyTo", fields: [applyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  applyTerminal Terminal?    @relation(fields: [terminalId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model GameState {
  id         String    @id
  start      Boolean   @default(false)
  phase      Int       @default(1)
  pause      Boolean
  clock      DateTime  @default(now())
  lastPause  DateTime?
  lastResume DateTime?
}

enum Role {
  ADMIN
  STAFF
  USER
}

enum AirlineRole {
  Captain
  Crew
  Co_pilot
}

enum AirlineClass {
  CPE
  DE
  ChE
  CE
  IE
  ME
  EE
  BA
  None
}

enum Game {
  Chayen
  Wordle
  None
}
